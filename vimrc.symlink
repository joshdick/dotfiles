" vim:fdm=marker
set encoding=utf-8

"Plugins {{{

"My Vim plugins are installed as Vim 8 packages (`:help packages`) via Git submodules.
"To see which ones are used, go to:
"< https://github.com/joshdick/dotfiles/search?q=filename%3A.gitmodules+%5Bsubmodule+%22vim.symlink%2Fpack%2F&unscoped_q=filename%3A.gitmodules+%5Bsubmodule+%22vim.symlink%2Fpack%2F >

packadd! onedark.vim

"}}}

"General Configuration {{{

set autoindent
set nowrap
filetype plugin indent on
syntax on

set softtabstop=2
set tabstop=2
set shiftwidth=2

set backspace=2 "Allow backspace to work properly
set cursorline
set hidden "Allow more than one unsaved buffer
set list "Show invisible characters by default
set listchars=tab:→\ "This comment prevents trailing whitespace removal from removing the escaped space. :)
set mouse=a
set nobackup
set nowritebackup
set number
set shortmess+=I "Disable splash screen/[I]ntro message

"Statusline
if exists("vimpager")
  set statusline=%<%F%h%m%r%h%w%y\ %{&ff}\ %{strftime(\"%c\",getftime(expand(\"%:p\")))}\ %=\ lin:%l\/%L\ col:%c%V\ %P
else
  set statusline=%<%F%h%m%r%h%w%y\ %{&ff}\ %{strftime(\"%c\",getftime(expand(\"%:p\")))}\ %{fugitive#statusline()}\ %=\ lin:%l\/%L\ col:%c%V\ %P
endif
set laststatus=2

"Cursor Styling
if (has("nvim") && !empty($TMUX))
  "Neovim + tmux per <https://github.com/neovim/neovim/wiki/Following-HEAD#20170402>
  set guicursor=n-v-c:block-Cursor/lCursor-blinkon0,i-ci:ver25-Cursor/lCursor,r-cr:hor20-Cursor/lCursor
elseif !empty($ITERM_PROFILE) "We're running inside iterm2
  if empty($TMUX)
    "iTerm2 per <http://vim.wikia.com/wiki/Change_cursor_shape_in_different_modes>
    let &t_SI = "\<Esc>]50;CursorShape=1\x7"
    let &t_SR = "\<Esc>]50;CursorShape=2\x7"
    let &t_EI = "\<Esc>]50;CursorShape=0\x7"
  else
    "tmux + iterm2 per <http://vim.wikia.com/wiki/Change_cursor_shape_in_different_modes>
    let &t_SI = "\<Esc>Ptmux;\<Esc>\<Esc>]50;CursorShape=1\x7\<Esc>\\"
    let &t_SR = "\<Esc>Ptmux;\<Esc>\<Esc>]50;CursorShape=2\x7\<Esc>\\"
    let &t_EI = "\<Esc>Ptmux;\<Esc>\<Esc>]50;CursorShape=0\x7\<Esc>\\"
  endif
endif

"Built-in extended '%' matching
runtime macros/matchit.vim

if !exists('g:os')
  if has('win32') || has('win16')
    let g:os = 'Windows'
  else
    let g:os = substitute(system('uname'), '\n', '', '')
  endif
endif

if has("gui") "Instead of gui_running, in case :gui is run manually on *NIX

  "Font settings
  set guifont=PragmataPro\ Mono:h13
  set antialias

  if g:os == 'Darwin'
    "set guioptions=egmrt "Hide toolbar by default in MacVim
    "if has("transparency") "Background transparency is a MacVim-specific feature, so prevent errors in other vims
      "set transparency=2 "Enable background transparency in MacVim
    "endif
    "Map CMD-[ and CMD-] to indent while preserving any Visual mode selection as appropriate
    nnoremap <D-[> <<
    nnoremap <D-]> >>
    xnoremap <D-[> <gv
    xnoremap <D-]> >gv
  endif

  "if g:os == 'Linux'
  "endif

  if g:os == 'Windows'
    "See :help behave
    behave mswin
    source $VIMRUNTIME/mswin.vim "Enable expected keyboard shortcuts for Windows
    set keymodel-=stopsel "Make Visual mode work as expected when mswin.vim is sourced
  endif

endif

"}}}

"Colorscheme {{{

"Use 24-bit (true-color) mode.
"More information about true-color mode in tmux:
"* http://sunaku.github.io/tmux-24bit-color.html#usage
"* https://github.com/tmux/tmux/issues/34
if (has("nvim"))
  "For Neovim 0.1.3 and 0.1.4 < https://github.com/neovim/neovim/pull/2198 >
  let $NVIM_TUI_ENABLE_TRUE_COLOR=1
endif
"For Neovim > 0.1.5 and Vim > patch 7.4.1799 < https://github.com/vim/vim/commit/61be73bb0f965a895bfb064ea3e55476ac175162 >
"Based on Vim patch 7.4.1770 (`guicolors` option) < https://github.com/vim/vim/commit/8a633e3427b47286869aa4b96f2bfc1fe65b25cd >
if (has("termguicolors"))
  if !empty($TMUX)
    "Set Vim-specific sequences for RGB colors; only seems to be needed for Vim 8 running inside tmux with $TERM=tmux
    "Found at < https://github.com/vim/vim/issues/993#issuecomment-255651605 >
    let &t_8f = "\<Esc>[38;2;%lu;%lu;%lum"
    let &t_8b = "\<Esc>[48;2;%lu;%lu;%lum"
  endif
  set termguicolors
endif

"onedark.vim override: Don't set a background color when running in a terminal;
"just use the terminal's background color
if (has("autocmd") && !has("gui_running"))
  augroup colors
    autocmd!
    let s:white = { "gui": "#ABB2BF", "cterm": "145", "cterm16": "7"}
    autocmd ColorScheme * call onedark#set_highlight("Normal", { "fg": s:white }) "No `bg` setting
  augroup END
endif

"For testing/development of <https://github.com/joshdick/onedark.vim>
"let g:onedark_termcolors=256
let g:onedark_termcolors=16

let g:onedark_terminal_italics=1

colorscheme onedark

"}}}

"Mappings {{{

"Note: By default, <leader> is backslash
let mapleader="\<Space>"
let maplocalleader="_"

"Select the last-changed text
noremap gV `[v`]

"Shortcut to toggle netrw
noremap <silent> <leader>e :Lexplore<CR>

"Shorcut to toggle search hilighting
"Found at <http://vim.wikia.com/wiki/Highlight_all_search_pattern_matches>
noremap <leader>h :set hlsearch! hlsearch?<CR>

inoremap ;; <Esc>

":w!! will use sudo to save a non-writable file if you forgot to do 'sudo vim' by accident
cnoremap w!! %!sudo tee > /dev/null %

"Shortcuts for opening new splits
"Found at <http://technotales.wordpress.com/2010/04/29/vim-splits-a-guide-to-doing-exactly-what-you-want/>
"Window
nnoremap <leader>sw<left>  :topleft  vnew<CR>
nnoremap <leader>sw<right> :botright vnew<CR>
nnoremap <leader>sw<up>    :topleft  new<CR>
nnoremap <leader>sw<down>  :botright new<CR>
"Buffer
nnoremap <leader>s<left>   :leftabove  vnew<CR>
nnoremap <leader>s<right>  :rightbelow vnew<CR>
nnoremap <leader>s<up>     :leftabove  new<CR>
nnoremap <leader>s<down>   :rightbelow new<CR>

"Shortcuts for manipulating window focus
nnoremap <leader><left> <c-w>h<CR>
nnoremap <leader><down> <c-w>j<CR>
nnoremap <leader><up> <c-w>k<CR>
nnoremap <leader><right> <c-w>l<CR>

"Shortcuts for switching tabs
nnoremap <c-h> :tabprevious<CR>
nnoremap <c-l> :tabnext<CR>

"Shortcuts for interacting with the system clipboard
"Found at <http://sheerun.net/2014/03/21/how-to-boost-your-vim-productivity/>
xnoremap <leader>y "+y
xnoremap <leader>d "+d
nnoremap <leader>p "+p
nnoremap <leader>P "+P
xnoremap <leader>p "+p
xnoremap <leader>P "+P

"Show buffer search
nnoremap <leader>b :CtrlPBuffer<CR>

"Shortcut to convert mixed line endings to LF-only (Unix)
nnoremap <leader>d :call ForceLF()<CR>

"Shortcut to toggle 'set list' (toggles invisible characters)
nnoremap <leader>l :set list!<CR>

"Bind a shortcut for opening the current document in Marked.app on Mac OS X
"Found at <https://github.com/kotfu/marked-bonus-pack#vim>
if g:os == 'Darwin'
  nnoremap <leader>m :silent !open -a Marked\ 2.app '%:p'<cr>
endif

"Shortcut to toggle line numbers
nnoremap <leader>n :set number! number?<CR>

"Shortcut to toggle CtrlP (for 'o'pening files)
nnoremap <leader>o :CtrlP<CR>

"Shortcut to close a window
nnoremap <leader>q :close<CR>

"Shortcut to toggle Gundo
nnoremap <leader>u :GundoToggle<CR>

"Shortcut to toggle auto-indenting for code paste
"Don't bother with pastetoggle, since it doesn't cooperate with vim-airline: <https://github.com/bling/vim-airline/issues/219>
nnoremap <leader>v :set invpaste<CR>

"Shortcut for saving
nnoremap <leader>w :w<CR>

"Shortcut that deletes a buffer without closing its window
"Found at <https://stackoverflow.com/questions/1444322/how-can-i-close-a-buffer-without-closing-the-window#comment16482171_5179609>
nnoremap <silent> <leader>x :ene<CR>:bd #<CR>

"Shortcut to strip trailing whitespace
nnoremap <silent> <leader>$ :call Preserve("%s/\\s\\+$//e")<CR>

"Shortcut to auto-indent entire file
nnoremap <silent> <leader>= :call Preserve("normal gg=G")<CR>

"Shortcut to sort words inside a single line
"Found at <http://stackoverflow.com/a/1329899/278810>
xnoremap <leader>, d:execute 'normal a' . join(sort(split(getreg('"'))), ' ')<CR>

"}}}

"Plugin Configuration {{{

"ack.vim {{{

"Use ag if it's available
if executable('ag')
  let g:ackprg='ag --vimgrep'
endif

"Alias 'ag' commands for use with ack.vim
cnoreabbrev ag Ack
cnoreabbrev aG Ack
cnoreabbrev Ag Ack
cnoreabbrev AG Ack
command! Ag Ack

"}}}

"vim-action-ack {{{

nmap * <Plug>AckActionWord
xmap * <Plug>AckActionVisual

"}}}

"ale {{{

let g:ale_open_list=1
let g:ale_lint_on_save=1
let g:ale_lint_on_text_changed=0

"}}}

"CtrlP {{{

"Make CtrlP play nicer with Git projects.
"Found at <http://sheerun.net/2014/03/21/how-to-boost-your-vim-productivity/>

let g:ctrlp_use_caching=0
if executable('ag')
  set grepprg=ag\ --nogroup\ --nocolor
  let g:ctrlp_user_command='ag %s -l --nocolor -g ""'
else
  let g:ctrlp_user_command=['.git', 'cd %s && git ls-files . -co --exclude-standard', 'find %s -type f']
  let g:ctrlp_prompt_mappings={
    \ 'AcceptSelection("e")': ['<space>', '<cr>', '<2-LeftMouse>'],
    \ }
endif

"}}}

"NERDCommenter {{{

"Add spaces after comment delimiters by default
let g:NERDSpaceDelims = 1

"}}}

"netrw {{{

" Found at <https://stackoverflow.com/a/23920240/278810>

com! -nargs=* -bar -bang -complete=dir Lexplore call netrw#Lexplore(<q-args>, <bang>0)

fun! Lexplore(dir, right)
  if exists("t:netrw_lexbufnr")
  " close down netrw explorer window
  let lexwinnr = bufwinnr(t:netrw_lexbufnr)
  if lexwinnr != -1
    let curwin = winnr()
    exe lexwinnr."wincmd w"
    close
    exe curwin."wincmd w"
  endif
  unlet t:netrw_lexbufnr

  else
    " open netrw explorer window in the dir of current file
    " (even on remote files)
    let path = substitute(exists("b:netrw_curdir")? b:netrw_curdir : expand("%:p"), '^\(.*[/\\]\)[^/\\]*$','\1','e')
    exe (a:right? "botright" : "topleft")." vertical ".((g:netrw_winsize > 0)? (g:netrw_winsize*winwidth(0))/100 : -g:netrw_winsize) . " new"
    if a:dir != ""
      exe "Explore ".a:dir
    else
      exe "Explore ".path
    endif
    setlocal winfixwidth
    let t:netrw_lexbufnr = bufnr("%")
  endif
endfun

" absolute width of netrw window
let g:netrw_winsize = -28

" do not display info on the top of window
let g:netrw_banner = 0

" tree-view
let g:netrw_liststyle = 3

" sort is affecting only: directories on the top, files below
let g:netrw_sort_sequence = '[\/]$,*'

" use the previous window to open file
let g:netrw_browse_split = 4

"}}}

"tern-for-vim {{{

let g:tern_map_keys=1

"}}}

"vim-markdown (via vim-polyglot) {{{

let g:vim_markdown_folding_disabled=1

"}}}

"lightline.vim {{{

set noshowmode

" For 'active' -> 'right' configuration, can optionally add 'linter_ok' after 'linter_warnings'
let g:lightline = {
  \ 'colorscheme': 'onedark',
  \ 'active': {
  \   'left': [ [ 'mode', 'paste' ], [ 'fugitive', 'filename' ], ['ctrlpmark'] ],
  \   'right': [ [ 'linter_checking', 'linter_errors', 'linter_warnings', 'lineinfo' ], ['percent'], [ 'fileformat', 'fileencoding', 'filetype' ] ]
  \ },
  \ 'component_function': {
  \   'fugitive': 'LightlineFugitive',
  \   'filename': 'LightlineFilename',
  \   'fileformat': 'LightlineFileformat',
  \   'filetype': 'LightlineFiletype',
  \   'fileencoding': 'LightlineFileencoding',
  \   'mode': 'LightlineMode',
  \   'ctrlpmark': 'CtrlPMark',
  \ },
  \ 'component_expand': {
  \  'linter_checking': 'lightline#ale#checking',
  \  'linter_warnings': 'lightline#ale#warnings',
  \  'linter_errors': 'lightline#ale#errors',
  \  'linter_ok': 'lightline#ale#ok',
  \ },
  \ 'component_type': {
  \  'linter_checking': 'left',
  \  'linter_warnings': 'warning',
  \  'linter_errors': 'error',
  \  'linter_ok': 'left',
  \ },
  \ 'separator': { 'left': '', 'right': '' },
  \ 'subseparator': { 'left': '', 'right': '' }
  \ }

function! LightlineModified()
  return &ft =~ 'help' ? '' : &modified ? '+' : &modifiable ? '' : '-'
endfunction

function! LightlineReadonly()
  return &ft !~? 'help' && &readonly ? 'RO' : ''
endfunction

function! LightlineFilename()
  let fname = expand('%:t')
  return fname == 'ControlP' && has_key(g:lightline, 'ctrlp_item') ? g:lightline.ctrlp_item :
        \ fname == '__Tagbar__' ? g:lightline.fname :
        \ fname =~ '__Gundo' ? '' :
        \ &ft == 'vimfiler' ? vimfiler#get_status_string() :
        \ &ft == 'unite' ? unite#get_status_string() :
        \ &ft == 'vimshell' ? vimshell#get_status_string() :
        \ ('' != LightlineReadonly() ? LightlineReadonly() . ' ' : '') .
        \ ('' != fname ? fname : '[No Name]') .
        \ ('' != LightlineModified() ? ' ' . LightlineModified() : '')
endfunction

function! LightlineFugitive()
  try
    if expand('%:t') !~? 'Tagbar\|Gundo\|NERD' && &ft !~? 'vimfiler' && exists('*fugitive#head')
      let mark = ' '
      let branch = fugitive#head()
      return branch !=# '' ? mark.branch : ''
    endif
  catch
  endtry
  return ''
endfunction

function! LightlineFileformat()
  return winwidth(0) > 70 ? &fileformat : ''
endfunction

function! LightlineFiletype()
  return winwidth(0) > 70 ? (&filetype !=# '' ? &filetype : 'no ft') : ''
endfunction

function! LightlineFileencoding()
  return winwidth(0) > 70 ? (&fenc !=# '' ? &fenc : &enc) : ''
endfunction

function! LightlineMode()
  let fname = expand('%:t')
  return fname == '__Tagbar__' ? 'Tagbar' :
        \ fname == 'ControlP' ? 'CtrlP' :
        \ fname == '__Gundo__' ? 'Gundo' :
        \ fname == '__Gundo_Preview__' ? 'Gundo Preview' :
        \ fname =~ 'NetrwTreeListing' ? 'Tree Listing' :
        \ &ft == 'unite' ? 'Unite' :
        \ &ft == 'vimfiler' ? 'VimFiler' :
        \ &ft == 'vimshell' ? 'VimShell' :
        \ winwidth(0) > 60 ? lightline#mode() : ''
endfunction

function! CtrlPMark()
  if expand('%:t') =~ 'ControlP' && has_key(g:lightline, 'ctrlp_item')
    call lightline#link('iR'[g:lightline.ctrlp_regex])
    return lightline#concatenate([g:lightline.ctrlp_prev, g:lightline.ctrlp_item
          \ , g:lightline.ctrlp_next], 0)
  else
    return ''
  endif
endfunction

let g:ctrlp_status_func = {
  \ 'main': 'CtrlPStatusFunc_1',
  \ 'prog': 'CtrlPStatusFunc_2',
  \ }

function! CtrlPStatusFunc_1(focus, byfname, regex, prev, item, next, marked)
  let g:lightline.ctrlp_regex = a:regex
  let g:lightline.ctrlp_prev = a:prev
  let g:lightline.ctrlp_item = a:item
  let g:lightline.ctrlp_next = a:next
  return lightline#statusline(0)
endfunction

function! CtrlPStatusFunc_2(str)
  return lightline#statusline(0)
endfunction

let g:tagbar_status_func = 'TagbarStatusFunc'

function! TagbarStatusFunc(current, sort, fname, ...) abort
    let g:lightline.fname = a:fname
  return lightline#statusline(0)
endfunction

let g:unite_force_overwrite_statusline = 0
let g:vimfiler_force_overwrite_statusline = 0
let g:vimshell_force_overwrite_statusline = 0

" Show the current working directory in tab names.
" Per <https://github.com/itchyny/lightline.vim/issues/245>
function! CustomTabname(n) abort
  return fnamemodify(getcwd(tabpagewinnr(a:n), a:n), ':t')
endfunction

let g:lightline.tab_component_function = {
      \ 'custom_tabname': 'CustomTabname',
      \ 'modified': 'lightline#tab#modified',
      \ 'readonly': 'lightline#tab#readonly',
      \ 'tabnum': 'lightline#tab#tabnum'
      \ }

let g:lightline.tab = {
      \ 'active': [ 'tabnum', 'custom_tabname', 'modified' ],
      \ 'inactive': [ 'tabnum', 'custom_tabname', 'modified' ] }

let g:lightline.tabline_separator = { 'left': '', 'right': '' }
let g:lightline.tabline_subseparator = { 'left': '‖', 'right': '‖' }

let g:lightline#ale#indicator_checking = "⏳"
let g:lightline#ale#indicator_warnings = "⚠️"
let g:lightline#ale#indicator_errors = "🚫"
let g:lightline#ale#indicator_ok = "✓"

"}}}

"}}}

"Functions/Miscellaneous {{{

"Highlight Trailing Whitespace {{{

"Adapted from <http://vim.wikia.com/wiki/Highlight_unwanted_spaces>
" * Inside insert mode, don't match trailing whitespace on the current line.
" * Outside insert mode, match all trailing whitespace on the current line.
let ExtraWhitespace_cterm = synIDattr(synIDtrans(hlID('Error')), 'fg', 'cterm')
let ExtraWhitespace_gui = synIDattr(synIDtrans(hlID('Error')), 'fg', 'gui')
exe 'highlight ExtraWhitespace ctermbg=' . ExtraWhitespace_cterm . ' guibg=' . ExtraWhitespace_gui
match ExtraWhitespace /\s\+$/
if has("autocmd")
  augroup whitespace_highlighting
    autocmd!
    autocmd ColorScheme * let ExtraWhitespace_cterm = synIDattr(synIDtrans(hlID('Error')), 'fg', 'cterm')
    autocmd ColorScheme * let ExtraWhitespace_gui = synIDattr(synIDtrans(hlID('Error')), 'fg', 'gui')
    autocmd ColorScheme * exe 'highlight ExtraWhitespace ctermbg=' . ExtraWhitespace_cterm . ' guibg=' . ExtraWhitespace_gui
    autocmd BufWinEnter * match ExtraWhitespace /\s\+$/
    autocmd InsertEnter * match ExtraWhitespace /\s\+\%#\@<!$/
    autocmd InsertLeave * match ExtraWhitespace /\s\+$/
    autocmd BufWinLeave * call clearmatches()
  augroup END
endif

"}}}

"Super Retab {{{

"Found at <http://vim.wikia.com/wiki/Super_retab>

"  Space2Tab  Convert spaces to tabs, only in indents.
"  Tab2Space  Convert tabs to spaces, only in indents.
"  RetabIndent  Execute Space2Tab (if 'expandtab' is set), or Tab2Space (otherwise).
"Each command accepts an argument that specifies the number of spaces in a tab column. By default, the 'tabstop' setting is used.

"Return indent (all whitespace at start of a line), converted from
"tabs to spaces if what=1, or from spaces to tabs otherwise.
"When converting to tabs, result has no redundant spaces.
function! Indenting(indent, what, cols)
  let spccol=repeat(' ', a:cols)
  let result=substitute(a:indent, spccol, '\t', 'g')
  let result=substitute(result, ' \+\ze\t', '', 'g')
  if a:what == 1
    let result=substitute(result, '\t', spccol, 'g')
  endif
  return result
endfunction

"Convert whitespace used for indenting (before first non-whitespace).
"what=0 (convert spaces to tabs), or 1 (convert tabs to spaces).
"cols=string with number of columns per tab, or empty to use 'tabstop'.
"The cursor position is restored, but the cursor will be in a different
"column when the number of characters in the indent of the line is changed.
function! IndentConvert(line1, line2, what, cols)
  let savepos=getpos('.')
  let cols=empty(a:cols) ? &tabstop : a:cols
  execute a:line1 . ',' . a:line2 . 's/^\s\+/\=Indenting(submatch(0), a:what, cols)/e'
  call histdel('search', -1)
  call setpos('.', savepos)
endfunction

command! -nargs=? -range=% Space2Tab call IndentConvert(<line1>,<line2>,0,<q-args>)
command! -nargs=? -range=% Tab2Space call IndentConvert(<line1>,<line2>,1,<q-args>)
command! -nargs=? -range=% RetabIndent call IndentConvert(<line1>,<line2>,&et,<q-args>)

"}}}

"Automatic Working Directory {{{

"Adapted from <http://inlehmansterms.net/2014/09/04/sane-vim-working-directories/>

" If in a Git repo, sets the working directory to its root,
" or if not, to the directory of the current file.
function! SetWorkingDirectory()
  " Default to the current file's directory (resolving symlinks.)
  let current_file = expand('%:p')
  if getftype(current_file) == 'link'
    let current_file = resolve(current_file)
  endif
  exe ':lcd' . fnamemodify(current_file, ':h')

  let git_dir = system("git rev-parse --show-toplevel")[:-2]
  " See if the command output starts with 'fatal' (if it does, not in a Git repo.)
  let is_not_git_dir = matchstr(git_dir, '^fatal:.*')
  " If in a Git repo, change the working directory to its root.
  if empty(is_not_git_dir)
    :lcd `=git_dir`
  endif
endfunction

if has("autocmd")
  augroup working_directory
    autocmd!
    autocmd BufRead * call SetWorkingDirectory()
  augroup END
endif

"}}}

"Automatic Helptags Generation {{{

"Disabled in favor of update() function in `~/.zsh/functions.zsh`,
"since this doesn't really need to run every time Vim starts.

" function! GenerateHelpTags()
  " silent! helptags ALL
" endfunction

" if v:vim_did_enter
  " call s:GenerateHelpTags
" else
  " if has("autocmd")
    " augroup generate_helptags
      " autocmd!
      " autocmd VimEnter * call GenerateHelpTags()
    " augroup END
  " endif
" endif

"}}}

"Miscellaneous {{{

"Shows the syntax highlighting group used at the cursor.
"Found at <http://vim.wikia.com/wiki/Identify_the_syntax_highlighting_group_used_at_the_cursor>
map <F10> :echo "hi<". synIDattr(synID(line("."),col("."),1),"name") . '> trans<'
  \ . synIDattr(synID(line("."),col("."),0),"name") . "> lo<"
  \ . synIDattr(synIDtrans(synID(line("."),col("."),1)),"name") . ">"<CR>

"Runs arbitrary commands while preserving state.
"Found at <http://technotales.wordpress.com/2010/03/31/preserve-a-vim-function-that-keeps-your-state/>
function! Preserve(command)
  "Preparation: save last search, and cursor position.
  let _s=@/
  let l=line(".")
  let c=col(".")
  "Do the business:
  execute a:command
  "Clean up: restore previous search history, and cursor position
  let @/=_s
  call cursor(l, c)
endfunction

"Converts mixed line endings to LF-only (Unix.)
"Found at <http://vim.wikia.com/wiki/File_format>
function! ForceLF()
  :update
  :e ++ff=dos
  :setlocal ff=unix
  :w
endfunction

"}}}

"}}}
